import decimal
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

from states import AdminStates
from config import ADMIN_IDS, logger
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏–∑ admin_handlers
from admin_handlers import (
    create_admin_menu, create_manage_categories_menu, 
    create_manage_products_menu, create_manage_locations_menu
)

router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ db –∏ bot
_db = None
_bot = None

def setup_edit_handlers(db, bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    global _db, _bot
    _db = db
    _bot = bot

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±—Ä–∞–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ—É–Ω–∫—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä (–æ–Ω–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∏–∑ admin_handlers)

# –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ô
@router.callback_query(F.data.startswith("admin_edit_category_"))
async def admin_edit_category_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    try:
        category_id = int(callback.data.split("_")[3])
        category = await _db.get_category(category_id)
        
        if not category:
            await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        await state.set_state(AdminStates.EDITING_CATEGORY)
        await state.update_data(category_id=category_id)
        
        status_text = " (–ù–ï–ê–ö–¢–ò–í–ù–ê)" if not category['is_active'] else ""
        await callback.message.edit_text(
            f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏{status_text}\n\n"
            f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {category['name']}\n"
            f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {category['description']}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_edit_category_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

@router.message(StateFilter(AdminStates.EDITING_CATEGORY))
async def process_edit_category(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    data = await state.get_data()
    category_id = data.get('category_id')
    
    lines = message.text.strip().split('\n')
    if len(lines) < 1:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –Ω–∞–∑–≤–∞–Ω–∏–µ")
        return
    
    try:
        name = lines[0].strip()
        description = lines[1].strip() if len(lines) > 1 else ""
        
        if not name:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        await _db.update_category(category_id, name, description)
        await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞", reply_markup=create_admin_menu())
        await state.set_state(AdminStates.ADMIN_MENU)
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –æ–±–Ω–æ–≤–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.callback_query(F.data.startswith("admin_delete_category_"))
async def admin_delete_category_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    try:
        category_id = int(callback.data.split("_")[3])
        category = await _db.get_category(category_id)
        
        if not category:
            await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        is_physical_delete = await _db.delete_category(category_id)
        
        if is_physical_delete:
            await callback.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category['name']}' –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞")
            logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} —Ñ–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category_id}")
        else:
            await callback.answer(f"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category['name']}' –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (–µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã)")
            logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category_id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        categories = await _db.get_categories(active_only=False)
        if categories:
            await callback.message.edit_text(
                "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏\n\n"
                "üìù - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, üóë - —É–¥–∞–ª–∏—Ç—å\n"
                "‚ö†Ô∏è - –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ (–µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã)",
                reply_markup=create_manage_categories_menu(categories)
            )
        else:
            await callback.message.edit_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=create_admin_menu())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

# –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –¢–û–í–ê–†–û–í
@router.callback_query(F.data.startswith("admin_edit_product_"))
async def admin_edit_product_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    try:
        product_id = int(callback.data.split("_")[3])
        product = await _db.get_product(product_id)
        
        if not product:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        await state.set_state(AdminStates.EDITING_PRODUCT)
        await state.update_data(product_id=product_id)
        
        status_text = " (–ù–ï–ê–ö–¢–ò–í–ï–ù)" if not product['is_active'] else ""
        await callback.message.edit_text(
            f"üì¶ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞{status_text}\n\n"
            f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n"
            f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {product['price_rub']} ‚ÇΩ\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ\n"
            f"–¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_edit_product_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞")

@router.message(StateFilter(AdminStates.EDITING_PRODUCT))
async def process_edit_product(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    data = await state.get_data()
    product_id = data.get('product_id')
    
    lines = message.text.strip().split('\n')
    if len(lines) < 3:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É")
        return
    
    try:
        name = lines[0].strip()
        description = lines[1].strip()
        price_rub = decimal.Decimal(lines[2].strip())
        
        if not name:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        if price_rub <= 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
            return
        
        await _db.update_product(product_id, name, description, price_rub)
        await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω", reply_markup=create_admin_menu())
        await state.set_state(AdminStates.ADMIN_MENU)
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –æ–±–Ω–æ–≤–∏–ª —Ç–æ–≤–∞—Ä {product_id}")
    except (ValueError, decimal.InvalidOperation):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.callback_query(F.data.startswith("admin_delete_product_"))
async def admin_delete_product_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    try:
        product_id = int(callback.data.split("_")[3])
        product = await _db.get_product(product_id)
        
        if not product:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
        is_physical_delete = await _db.delete_product(product_id)
        
        if is_physical_delete:
            await callback.answer(f"‚úÖ –¢–æ–≤–∞—Ä '{product['name']}' –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω")
            logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} —Ñ–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏–ª —Ç–æ–≤–∞—Ä {product_id}")
        else:
            await callback.answer(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä '{product['name']}' –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã)")
            logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ç–æ–≤–∞—Ä {product_id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        categories = await _db.get_categories(active_only=False)
        all_products = []
        
        for category in categories:
            products = await _db.get_products(category['id'], active_only=False)
            for prod in products:
                prod['category_name'] = category['name']
                all_products.append(prod)
        
        if all_products:
            await callback.message.edit_text(
                "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏\n\n"
                "üìù - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, üóë - —É–¥–∞–ª–∏—Ç—å\n"
                "‚ö†Ô∏è - –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ (–µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã)",
                reply_markup=create_manage_products_menu(all_products)
            )
        else:
            await callback.message.edit_text("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=create_admin_menu())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")

# –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ö–ê–¶–ò–ô
@router.callback_query(F.data.startswith("admin_edit_location_"))
async def admin_edit_location_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    try:
        location_id = int(callback.data.split("_")[3])
        location = await _db.get_location(location_id)
        
        if not location:
            await callback.answer("‚ùå –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        await state.set_state(AdminStates.EDITING_LOCATION)
        await state.update_data(location_id=location_id)
        
        links_text = '\n'.join(location['content_links'])
        status_text = " (–ù–ï–ê–ö–¢–ò–í–ù–ê)" if not location['is_active'] else ""
        
        await callback.message.edit_text(
            f"üìç –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏{status_text}\n\n"
            f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {location['name']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫: {len(location['content_links'])}\n\n"
            f"–¢–µ–∫—É—â–∏–µ —Å—Å—ã–ª–∫–∏:\n{links_text}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏\n"
            f"–°—Å—ã–ª–∫–∞1\n"
            f"–°—Å—ã–ª–∫–∞2\n"
            f"..."
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_edit_location_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞—Ü–∏–∏")

@router.message(StateFilter(AdminStates.EDITING_LOCATION))
async def process_edit_location(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏"""
    data = await state.get_data()
    location_id = data.get('location_id')
    
    lines = message.text.strip().split('\n')
    if len(lines) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Å—ã–ª–∫—É")
        return
    
    try:
        name = lines[0].strip()
        content_links = [line.strip() for line in lines[1:] if line.strip()]
        
        if not name:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        if not content_links:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Å—ã–ª–∫—É")
            return
        
        await _db.update_location(location_id, name, content_links)
        await message.answer(f"‚úÖ –õ–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞", reply_markup=create_admin_menu())
        await state.set_state(AdminStates.ADMIN_MENU)
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –æ–±–Ω–æ–≤–∏–ª –ª–æ–∫–∞—Ü–∏—é {location_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@router.callback_query(F.data.startswith("admin_delete_location_"))
async def admin_delete_location_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    try:
        location_id = int(callback.data.split("_")[3])
        location = await _db.get_location(location_id)
        
        if not location:
            await callback.answer("‚ùå –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é
        is_physical_delete = await _db.delete_location(location_id)
        
        if is_physical_delete:
            await callback.answer(f"‚úÖ –õ–æ–∫–∞—Ü–∏—è '{location['name']}' –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞")
            logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} —Ñ–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏–ª –ª–æ–∫–∞—Ü–∏—é {location_id}")
        else:
            await callback.answer(f"‚ö†Ô∏è –õ–æ–∫–∞—Ü–∏—è '{location['name']}' –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (–µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã)")
            logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ª–æ–∫–∞—Ü–∏—é {location_id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        categories = await _db.get_categories(active_only=False)
        all_locations = []
        
        for category in categories:
            products = await _db.get_products(category['id'], active_only=False)
            for product in products:
                locations = await _db.get_locations(product['id'], active_only=False)
                for loc in locations:
                    loc['product_name'] = product['name']
                    loc['category_name'] = category['name']
                    all_locations.append(loc)
        
        if all_locations:
            await callback.message.edit_text(
                "üìç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏—è–º–∏\n\n"
                "üìù - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, üóë - —É–¥–∞–ª–∏—Ç—å\n"
                "‚ö†Ô∏è - –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ (–µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã)",
                reply_markup=create_manage_locations_menu(all_locations)
            )
        else:
            await callback.message.edit_text("‚ùå –õ–æ–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=create_admin_menu())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏")
