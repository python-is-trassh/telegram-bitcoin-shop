import decimal
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

from states import AdminStates
from config import ADMIN_IDS, logger

router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ db –∏ bot
_db = None
_bot = None

def setup_admin_handlers(db, bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    global _db, _bot
    _db = db
    _bot = bot

# –§—É–Ω–∫—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã —Å—é–¥–∞ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤)
def create_admin_menu():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="admin_add_category"))
    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_add_product"))
    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", callback_data="admin_add_location"))
    builder.add(InlineKeyboardButton(text="üéüÔ∏è –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="admin_add_promo"))
    builder.add(InlineKeyboardButton(text="üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏", callback_data="admin_manage_categories"))
    builder.add(InlineKeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="admin_manage_products"))
    builder.add(InlineKeyboardButton(text="üìç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏—è–º–∏", callback_data="admin_manage_locations"))
    builder.add(InlineKeyboardButton(text="üéüÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏", callback_data="admin_manage_promos"))
    builder.add(InlineKeyboardButton(text="‚≠ê –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤", callback_data="admin_view_reviews"))
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ¬´–û –º–∞–≥–∞–∑–∏–Ω–µ¬ª", callback_data="admin_edit_about"))
    builder.add(InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"))
    builder.add(InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    builder.adjust(2, 2, 2, 2, 2, 1, 1, 1)
    return builder.as_markup()

def create_manage_categories_menu(categories):
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    builder = InlineKeyboardBuilder()
    for category in categories:
        status_icon = "‚ö†Ô∏è" if not category['is_active'] else ""
        builder.add(InlineKeyboardButton(
            text=f"üìù {category['name']} {status_icon}",
            callback_data=f"admin_edit_category_{category['id']}"
        ))
        builder.add(InlineKeyboardButton(
            text="üóë",
            callback_data=f"admin_delete_category_{category['id']}"
        ))
    builder.add(InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu"))
    builder.adjust(2)
    return builder.as_markup()

def create_manage_products_menu(products):
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏"""
    builder = InlineKeyboardBuilder()
    for product in products:
        status_icon = "‚ö†Ô∏è" if not product['is_active'] else ""
        builder.add(InlineKeyboardButton(
            text=f"üìù {product['category_name']} - {product['name']} {status_icon}",
            callback_data=f"admin_edit_product_{product['id']}"
        ))
        builder.add(InlineKeyboardButton(
            text="üóë",
            callback_data=f"admin_delete_product_{product['id']}"
        ))
    builder.add(InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu"))
    builder.adjust(2)
    return builder.as_markup()

def create_manage_locations_menu(locations):
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏—è–º–∏"""
    builder = InlineKeyboardBuilder()
    for location in locations:
        status_icon = "‚ö†Ô∏è" if not location['is_active'] else ""
        available_count = location.get('available_links_count', 0)
        builder.add(InlineKeyboardButton(
            text=f"üìù {location['product_name']} - {location['name']} ({available_count}) {status_icon}",
            callback_data=f"admin_edit_location_{location['id']}"
        ))
        builder.add(InlineKeyboardButton(
            text="üóë",
            callback_data=f"admin_delete_location_{location['id']}"
        ))
    builder.add(InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu"))
    builder.adjust(2)
    return builder.as_markup()

def create_manage_promos_menu(promos):
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"""
    builder = InlineKeyboardBuilder()
    for promo in promos:
        status_icon = "‚ö†Ô∏è" if not promo['is_active'] else ""
        usage_text = f"({promo['current_uses']}/{promo['max_uses']})" if promo['max_uses'] > 0 else ""
        builder.add(InlineKeyboardButton(
            text=f"üìù {promo['code']} {usage_text} {status_icon}",
            callback_data=f"admin_edit_promo_{promo['id']}"
        ))
        builder.add(InlineKeyboardButton(
            text="üóë",
            callback_data=f"admin_delete_promo_{promo['id']}"
        ))
    builder.add(InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu"))
    builder.adjust(2)
    return builder.as_markup()

def create_back_to_admin_menu():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu"))
    return builder.as_markup()

# –ü—Ä–æ–º–æ–∫–æ–¥—ã - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
@router.callback_query(F.data == "admin_add_promo")
async def admin_add_promo_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    await state.set_state(AdminStates.ADDING_PROMO)
    await callback.message.edit_text(
        "üéüÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ö–û–î\n"
        "–¢–∏–ø —Å–∫–∏–¥–∫–∏ (percent/fixed)\n"
        "–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏\n"
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ (0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π (0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)\n"
        "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ –¥–Ω—è—Ö (0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "SALE20\n"
        "percent\n"
        "20\n"
        "1000\n"
        "100\n"
        "30"
    )
    await callback.answer()

@router.message(StateFilter(AdminStates.ADDING_PROMO))
async def process_add_promo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    lines = message.text.strip().split('\n')
    if len(lines) < 6:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        return
    
    try:
        code = lines[0].strip().upper()
        discount_type = lines[1].strip().lower()
        discount_value = decimal.Decimal(lines[2].strip())
        min_order_amount = decimal.Decimal(lines[3].strip())
        max_uses = int(lines[4].strip())
        days_valid = int(lines[5].strip())
        
        if discount_type not in ['percent', 'fixed']:
            await message.answer("‚ùå –¢–∏–ø —Å–∫–∏–¥–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'percent' –∏–ª–∏ 'fixed'")
            return
        
        if discount_type == 'percent' and (discount_value <= 0 or discount_value > 100):
            await message.answer("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100")
            return
        
        if discount_type == 'fixed' and discount_value <= 0:
            await message.answer("‚ùå –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        
        expires_at = None
        if days_valid > 0:
            expires_at = datetime.now() + timedelta(days=days_valid)
        
        promo_id = await _db.add_promo_code(
            code, discount_type, discount_value, min_order_amount, max_uses, expires_at
        )
        
        await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ '{code}' –¥–æ–±–∞–≤–ª–µ–Ω (ID: {promo_id})", 
                           reply_markup=create_admin_menu())
        await state.set_state(AdminStates.ADMIN_MENU)
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –¥–æ–±–∞–≤–∏–ª –ø—Ä–æ–º–æ–∫–æ–¥ '{code}'")
    except (ValueError, decimal.InvalidOperation):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –ü—Ä–æ–º–æ–∫–æ–¥—ã - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
@router.callback_query(F.data == "admin_manage_promos")
async def admin_manage_promos_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    try:
        promos = await _db.get_promo_codes(active_only=False)
        if not promos:
            await callback.message.edit_text("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=create_admin_menu())
            await callback.answer()
            return
        
        await state.set_state(AdminStates.MANAGE_PROMOS)
        await callback.message.edit_text(
            "üéüÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏\n\n"
            "üìù - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, üóë - —É–¥–∞–ª–∏—Ç—å\n"
            "‚ö†Ô∏è - –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã",
            reply_markup=create_manage_promos_menu(promos)
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_manage_promos_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")

@router.callback_query(F.data.startswith("admin_delete_promo_"))
async def admin_delete_promo_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    try:
        promo_id = int(callback.data.split("_")[3])
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        await _db.deactivate_promo_code(promo_id)
        await callback.answer("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        promos = await _db.get_promo_codes(active_only=False)
        if promos:
            await callback.message.edit_text(
                "üéüÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏\n\n"
                "üìù - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, üóë - —É–¥–∞–ª–∏—Ç—å\n"
                "‚ö†Ô∏è - –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã",
                reply_markup=create_manage_promos_menu(promos)
            )
        else:
            await callback.message.edit_text("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=create_admin_menu())
        
        logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ {promo_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞")

# –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
@router.callback_query(F.data == "admin_manage_products")
async def admin_manage_products_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    try:
        categories = await _db.get_categories(active_only=False)
        all_products = []
        
        for category in categories:
            products = await _db.get_products(category['id'], active_only=False)
            for product in products:
                product['category_name'] = category['name']
                all_products.append(product)
        
        if not all_products:
            await callback.message.edit_text("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=create_admin_menu())
            await callback.answer()
            return
        
        await state.set_state(AdminStates.MANAGE_PRODUCTS)
        await callback.message.edit_text(
            "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏\n\n"
            "üìù - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, üóë - —É–¥–∞–ª–∏—Ç—å\n"
            "‚ö†Ô∏è - –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ (–µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã)",
            reply_markup=create_manage_products_menu(all_products)
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_manage_products_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤")

# –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏—è–º–∏
@router.callback_query(F.data == "admin_manage_locations")
async def admin_manage_locations_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏—è–º–∏"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    try:
        categories = await _db.get_categories(active_only=False)
        all_locations = []
        
        for category in categories:
            products = await _db.get_products(category['id'], active_only=False)
            for product in products:
                locations = await _db.get_locations(product['id'], active_only=False)
                for location in locations:
                    location['product_name'] = product['name']
                    location['category_name'] = category['name']
                    all_locations.append(location)
        
        if not all_locations:
            await callback.message.edit_text("‚ùå –õ–æ–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=create_admin_menu())
            await callback.answer()
            return
        
        await state.set_state(AdminStates.MANAGE_LOCATIONS)
        await callback.message.edit_text(
            "üìç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏—è–º–∏\n\n"
            "üìù - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, üóë - —É–¥–∞–ª–∏—Ç—å\n"
            "‚ö†Ô∏è - –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ (–µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã)",
            reply_markup=create_manage_locations_menu(all_locations)
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_manage_locations_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞—Ü–∏–π")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
@router.callback_query(F.data == "admin_stats")
async def admin_stats_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    try:
        stats = await _db.get_stats()
        
        text = f"üìä *–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        text += f"üì¶ **–ó–∞–∫–∞–∑—ã:**\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total_orders']}\n"
        text += f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed_orders']}\n"
        text += f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç: {stats['pending_orders']}\n\n"
        text += f"üí∞ **–§–∏–Ω–∞–Ω—Å—ã:**\n"
        text += f"‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {stats['total_revenue']:,.2f} ‚ÇΩ\n"
        text += f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {stats['today_revenue']:,.2f} ‚ÇΩ\n\n"
        text += f"‚≠ê **–û—Ç–∑—ã–≤—ã:**\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {stats['total_reviews']}\n"
        if stats['total_reviews'] > 0:
            text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {stats['avg_rating']:.1f}/5\n\n"
        text += f"üìÖ **–°–µ–≥–æ–¥–Ω—è:**\n"
        text += f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {stats['today_orders']}"
        
        await callback.message.edit_text(text, reply_markup=create_back_to_admin_menu(), parse_mode='Markdown')
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_stats_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤
@router.callback_query(F.data == "admin_view_reviews")
async def admin_view_reviews_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã
        async with _db.pool.acquire() as conn:
            reviews = await conn.fetch('''
                SELECT r.*, p.name as product_name, r.user_id
                FROM reviews r
                JOIN products p ON r.product_id = p.id
                ORDER BY r.created_at DESC
                LIMIT 20
            ''')
        
        if not reviews:
            text = "‚≠ê *–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤*\n\n–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
        else:
            text = f"‚≠ê *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã* (–ø–æ–∫–∞–∑–∞–Ω–æ {len(reviews)})\n\n"
            
            for i, review in enumerate(reviews, 1):
                stars = "‚≠ê" * review['rating']
                user_masked = f"***{str(review['user_id'])[-3:]}"
                date = review['created_at'].strftime("%d.%m.%Y %H:%M")
                
                text += f"{i}. **{review['product_name']}**\n"
                text += f"{stars} –æ—Ç {user_masked} ({date})\n"
                if review['comment']:
                    text += f"üí¨ {review['comment']}\n"
                text += "\n"
        
        await state.set_state(AdminStates.VIEWING_REVIEWS)
        await callback.message.edit_text(text, reply_markup=create_back_to_admin_menu(), parse_mode='Markdown')
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_view_reviews_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤")

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ "–û –º–∞–≥–∞–∑–∏–Ω–µ"
@router.callback_query(F.data == "admin_edit_about")
async def admin_edit_about_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–≥–∞–∑–∏–Ω–µ"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    try:
        current_about = await _db.get_setting('about_text')
        
        await state.set_state(AdminStates.EDITING_ABOUT)
        await callback.message.edit_text(
            f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ \"–û –º–∞–≥–∞–∑–∏–Ω–µ\"\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n{current_about}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_edit_about_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞")

@router.message(StateFilter(AdminStates.EDITING_ABOUT))
async def process_edit_about(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–≥–∞–∑–∏–Ω–µ"""
    try:
        new_about_text = message.text.strip()
        
        if not new_about_text:
            await message.answer("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        await _db.set_setting('about_text', new_about_text)
        await message.answer("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", reply_markup=create_admin_menu())
        await state.set_state(AdminStates.ADMIN_MENU)
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –æ–±–Ω–æ–≤–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–≥–∞–∑–∏–Ω–µ: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data == "admin_add_category")
async def admin_add_category_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    await state.set_state(AdminStates.ADDING_CATEGORY)
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await callback.answer()

@router.message(StateFilter(AdminStates.ADDING_CATEGORY))
async def process_add_category(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_name = message.text.strip()
    
    if not category_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    
    try:
        category_id = await _db.add_category(category_name)
        await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ (ID: {category_id})", 
                           reply_markup=create_admin_menu())
        await state.set_state(AdminStates.ADMIN_MENU)
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –¥–æ–±–∞–≤–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data == "admin_add_product")
async def admin_add_product_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    try:
        categories = await _db.get_categories(active_only=False)
        if not categories:
            await callback.message.edit_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", reply_markup=create_admin_menu())
            await callback.answer()
            return
        
        builder = InlineKeyboardBuilder()
        for category in categories:
            builder.add(InlineKeyboardButton(
                text=category['name'],
                callback_data=f"admin_select_category_{category['id']}"
            ))
        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu"))
        builder.adjust(1)
        
        await callback.message.edit_text("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞:", reply_markup=builder.as_markup())
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_add_product_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

@router.callback_query(F.data.startswith("admin_select_category_"))
async def admin_select_category_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
    category_id = int(callback.data.split("_")[3])
    await state.set_state(AdminStates.ADDING_PRODUCT)
    await state.update_data(category_id=category_id)
    
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                                   "–ù–∞–∑–≤–∞–Ω–∏–µ\n"
                                   "–û–ø–∏—Å–∞–Ω–∏–µ\n"
                                   "–¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö\n\n"
                                   "–ü—Ä–∏–º–µ—Ä:\n"
                                   "–ü—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç\n"
                                   "–î–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π\n"
                                   "1500")
    await callback.answer()

@router.message(StateFilter(AdminStates.ADDING_PRODUCT))
async def process_add_product(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    data = await state.get_data()
    category_id = data.get('category_id')
    
    lines = message.text.strip().split('\n')
    if len(lines) < 3:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É")
        return
    
    try:
        name = lines[0].strip()
        description = lines[1].strip()
        price_rub = decimal.Decimal(lines[2].strip())
        
        if price_rub <= 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
            return
        
        product_id = await _db.add_product(category_id, name, description, price_rub)
        await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä '{name}' –¥–æ–±–∞–≤–ª–µ–Ω (ID: {product_id})", 
                           reply_markup=create_admin_menu())
        await state.set_state(AdminStates.ADMIN_MENU)
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –¥–æ–±–∞–≤–∏–ª —Ç–æ–≤–∞—Ä '{name}'")
    except (ValueError, decimal.InvalidOperation):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
@router.callback_query(F.data == "admin_add_location")
async def admin_add_location_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
        categories = await _db.get_categories(active_only=False)
        all_products = []
        
        for category in categories:
            products = await _db.get_products(category['id'], active_only=False)
            for product in products:
                product['category_name'] = category['name']
                all_products.append(product)
        
        if not all_products:
            await callback.message.edit_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã", reply_markup=create_admin_menu())
            await callback.answer()
            return
        
        builder = InlineKeyboardBuilder()
        for product in all_products:
            builder.add(InlineKeyboardButton(
                text=f"{product['category_name']} - {product['name']}",
                callback_data=f"admin_select_product_{product['id']}"
            ))
        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu"))
        builder.adjust(1)
        
        await callback.message.edit_text("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏:", reply_markup=builder.as_markup())
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_add_location_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤")

@router.callback_query(F.data.startswith("admin_select_product_"))
async def admin_select_product_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏"""
    product_id = int(callback.data.split("_")[3])
    await state.set_state(AdminStates.ADDING_LOCATION)
    await state.update_data(product_id=product_id)
    
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                                   "–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏\n"
                                   "–°—Å—ã–ª–∫–∞1\n"
                                   "–°—Å—ã–ª–∫–∞2\n"
                                   "–°—Å—ã–ª–∫–∞3\n"
                                   "...\n\n"
                                   "–ü—Ä–∏–º–µ—Ä:\n"
                                   "–ú–æ—Å–∫–≤–∞\n"
                                   "https://example.com/link1\n"
                                   "https://example.com/link2\n"
                                   "https://example.com/link3")
    await callback.answer()

@router.message(StateFilter(AdminStates.ADDING_LOCATION))
async def process_add_location(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏"""
    data = await state.get_data()
    product_id = data.get('product_id')
    
    lines = message.text.strip().split('\n')
    if len(lines) < 2:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Å—ã–ª–∫—É")
        return
    
    try:
        name = lines[0].strip()
        content_links = [line.strip() for line in lines[1:] if line.strip()]
        
        if not content_links:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Å—ã–ª–∫—É")
            return
        
        if not name:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        location_id = await _db.add_location(product_id, name, content_links)
        await message.answer(f"‚úÖ –õ–æ–∫–∞—Ü–∏—è '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å {len(content_links)} —Å—Å—ã–ª–∫–∞–º–∏ (ID: {location_id})", 
                           reply_markup=create_admin_menu())
        await state.set_state(AdminStates.ADMIN_MENU)
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –¥–æ–±–∞–≤–∏–ª –ª–æ–∫–∞—Ü–∏—é '{name}' —Å {len(content_links)} —Å—Å—ã–ª–∫–∞–º–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
@router.callback_query(F.data == "admin_manage_categories")
async def admin_manage_categories_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    try:
        categories = await _db.get_categories(active_only=False)
        if not categories:
            await callback.message.edit_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=create_admin_menu())
            await callback.answer()
            return
        
        await state.set_state(AdminStates.MANAGE_CATEGORIES)
        await callback.message.edit_text(
            "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏\n\n"
            "üìù - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, üóë - —É–¥–∞–ª–∏—Ç—å\n"
            "‚ö†Ô∏è - –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ (–µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã)",
            reply_markup=create_manage_categories_menu(categories)
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_manage_categories_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
