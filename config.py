import os
import logging
import re
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
DB_URL = os.getenv('DATABASE_URL', 'postgresql://user:password@localhost/botdb')
BITCOIN_ADDRESS = os.getenv('BITCOIN_ADDRESS')
ADMIN_IDS = [int(x.strip()) for x in os.getenv('ADMIN_IDS', '').split(',') if x.strip().isdigit()]
BLOCKCHAIN_API_KEY = os.getenv('BLOCKCHAIN_API_KEY', '')
TEST_MODE = os.getenv('TEST_MODE', 'false').lower() == 'true'

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
MAX_ORDERS_PER_USER = int(os.getenv('MAX_ORDERS_PER_USER', '5'))
ORDER_TIMEOUT_MINUTES = int(os.getenv('ORDER_TIMEOUT_MINUTES', '30'))
RATE_LIMIT_ENABLED = os.getenv('RATE_LIMIT_ENABLED', 'true').lower() == 'true'
MAX_REQUESTS_PER_MINUTE = int(os.getenv('MAX_REQUESTS_PER_MINUTE', '30'))

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–∞–ª–∏–¥–∞—Ü–∏—è Bitcoin –∞–¥—Ä–µ—Å–∞
def validate_bitcoin_address(address: str) -> bool:
    """–ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è Bitcoin –∞–¥—Ä–µ—Å–∞"""
    if not address:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–¥—Ä–µ—Å–æ–≤
    if address.startswith('1'):  # P2PKH
        return len(address) >= 26 and len(address) <= 35 and address.isalnum()
    elif address.startswith('3'):  # P2SH
        return len(address) >= 26 and len(address) <= 35 and address.isalnum()
    elif address.startswith('bc1'):  # Bech32
        return len(address) >= 42 and len(address) <= 62 and re.match(r'^bc1[a-z0-9]+$', address)
    
    return False

def validate_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    errors = []
    warnings = []
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    if not BOT_TOKEN:
        errors.append("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    elif not BOT_TOKEN.endswith(':AAG') and not BOT_TOKEN.endswith(':AAH'):
        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞ Telegram
        if len(BOT_TOKEN.split(':')) != 2:
            warnings.append("BOT_TOKEN –∏–º–µ–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ Bitcoin –∞–¥—Ä–µ—Å–∞
    if not BITCOIN_ADDRESS:
        errors.append("BITCOIN_ADDRESS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    elif not validate_bitcoin_address(BITCOIN_ADDRESS):
        errors.append(f"BITCOIN_ADDRESS –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {BITCOIN_ADDRESS}")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not DB_URL:
        errors.append("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    elif not DB_URL.startswith('postgresql://'):
        warnings.append("DATABASE_URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'postgresql://'")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–æ–≤
    if not ADMIN_IDS:
        warnings.append("ADMIN_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã - –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ ID –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
        invalid_ids = [aid for aid in ADMIN_IDS if aid <= 0]
        if invalid_ids:
            errors.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ADMIN_IDS: {invalid_ids}")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    if MAX_ORDERS_PER_USER <= 0:
        errors.append("MAX_ORDERS_PER_USER –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
    elif MAX_ORDERS_PER_USER > 20:
        warnings.append("MAX_ORDERS_PER_USER —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è <= 20)")
    
    if ORDER_TIMEOUT_MINUTES <= 0:
        errors.append("ORDER_TIMEOUT_MINUTES –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
    elif ORDER_TIMEOUT_MINUTES > 60:
        warnings.append("ORDER_TIMEOUT_MINUTES —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è <= 60)")
    
    if MAX_REQUESTS_PER_MINUTE <= 0:
        errors.append("MAX_REQUESTS_PER_MINUTE –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
    elif MAX_REQUESTS_PER_MINUTE > 100:
        warnings.append("MAX_REQUESTS_PER_MINUTE —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è <= 100)")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    if TEST_MODE:
        warnings.append("üß™ –í–ö–õ–Æ–ß–ï–ù –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –æ—Ç–∫–ª—é—á–∏—Ç–µ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞!")
    
    # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if warnings:
        for warning in warnings:
            logger.warning(f"‚ö†Ô∏è {warning}")
    
    if errors:
        for error in errors:
            logger.error(f"‚ùå {error}")
        return False
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
    logger.info(f"üìç Bitcoin –∞–¥—Ä–µ—Å: {BITCOIN_ADDRESS}")
    logger.info(f"üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(ADMIN_IDS)}")
    logger.info(f"üìä –õ–∏–º–∏—Ç—ã: {MAX_ORDERS_PER_USER} –∑–∞–∫–∞–∑–æ–≤/{ORDER_TIMEOUT_MINUTES} –º–∏–Ω")
    if RATE_LIMIT_ENABLED:
        logger.info(f"üõ°Ô∏è Rate limit: {MAX_REQUESTS_PER_MINUTE} –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω")
    
    return True

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
SENSITIVE_PATTERNS = [
    r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b',  # Email
    r'\b\d{4}[\s-]?\d{4}[\s-]?\d{4}[\s-]?\d{4}\b',  # –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã
    r'\b\d{3}-\d{2}-\d{4}\b',  # SSN
]

def contains_sensitive_data(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ"""
    if not text or not isinstance(text, str):
        return False
    
    for pattern in SENSITIVE_PATTERNS:
        if re.search(pattern, text, re.IGNORECASE):
            return True
    return False

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Blacklist –¥–ª—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
SUSPICIOUS_DOMAINS = [
    'bit.ly', 'tinyurl.com', 'short.link', 't.co',
    'telegram.me', 'telegram.org'  # –§–∏—à–∏–Ω–≥–æ–≤—ã–µ –¥–æ–º–µ–Ω—ã
]

def is_suspicious_link(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏"""
    if not url or not isinstance(url, str):
        return False
    
    url_lower = url.lower()
    for domain in SUSPICIOUS_DOMAINS:
        if domain in url_lower:
            return True
    return False
