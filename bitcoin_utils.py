import decimal
import aiohttp
import asyncio
from datetime import datetime, timedelta
from typing import Optional
import logging

from config import BLOCKCHAIN_API_KEY, TEST_MODE

logger = logging.getLogger(__name__)

# –ö—ç—à –¥–ª—è –∫—É—Ä—Å–∞ Bitcoin
btc_rate_cache = {'rate': None, 'timestamp': None}

async def get_btc_rate() -> decimal.Decimal:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ Bitcoin —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    global btc_rate_cache
    
    now = datetime.now()
    if (btc_rate_cache['timestamp'] and 
        now - btc_rate_cache['timestamp'] < timedelta(minutes=5)):
        return btc_rate_cache['rate']
    
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
            # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞
            apis = [
                'https://api.coindesk.com/v1/bpi/currentprice/RUB.json',
                'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=rub'
            ]
            
            for api_url in apis:
                try:
                    async with session.get(api_url) as resp:
                        if resp.status == 200:
                            data = await resp.json()
                            
                            if 'coindesk.com' in api_url:
                                rate = decimal.Decimal(str(data['bpi']['RUB']['rate_float']))
                            else:  # coingecko
                                rate = decimal.Decimal(str(data['bitcoin']['rub']))
                            
                            btc_rate_cache['rate'] = rate
                            btc_rate_cache['timestamp'] = now
                            logger.info(f"–ö—É—Ä—Å Bitcoin –æ–±–Ω–æ–≤–ª–µ–Ω: {rate} RUB")
                            return rate
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ —Å {api_url}: {e}")
                    continue
                    
        raise Exception("–í—Å–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ Bitcoin: {e}")
        # –ï—Å–ª–∏ –∫—É—Ä—Å –≤ –∫—ç—à–µ –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if btc_rate_cache['rate']:
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å: {btc_rate_cache['rate']}")
            return btc_rate_cache['rate']
        # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫—É—Ä—Å: 5000000 RUB")
        return decimal.Decimal('5000000')

async def check_bitcoin_payment(address: str, amount: decimal.Decimal, order_created_at: datetime, db) -> Optional[str]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Bitcoin –ø–ª–∞—Ç–µ–∂–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Ö–µ—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if TEST_MODE:
            logger.info("üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –ø–ª–∞—Ç–µ–∂ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º")
            return "test_transaction_hash"
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: –∞–¥—Ä–µ—Å={address}, —Ç–æ—á–Ω–∞—è —Å—É–º–º–∞={amount} BTC")
        logger.info(f"‚è∞ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {order_created_at}")
        
        # –î–æ–ø—É—Å—Ç–∏–º–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å ¬±1 —Å–∞—Ç–æ—à–∏ –¥–ª—è —É—á–µ—Ç–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Å–µ—Ç–∏
        tolerance = decimal.Decimal('0.00000001')  # 1 —Å–∞—Ç–æ—à–∏
        min_amount = amount - tolerance
        max_amount = amount + tolerance
        
        logger.info(f"üí∞ –î–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã—Ö —Å—É–º–º: {min_amount} - {max_amount} BTC (¬±1 —Å–∞—Ç–æ—à–∏)")
        
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=15)) as session:
            url = f"https://blockchain.info/rawaddr/{address}?limit=50"
            logger.info(f"üì° –ó–∞–ø—Ä–æ—Å –∫ API: {url}")
            
            async with session.get(url) as resp:
                logger.info(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API: {resp.status}")
                
                if resp.status != 200:
                    logger.warning(f"‚ùå Blockchain API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status}")
                    return None
                    
                data = await resp.json()
                tx_count = len(data.get('txs', []))
                logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {tx_count}")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ Unix timestamp –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                order_timestamp = int(order_created_at.timestamp())
                logger.info(f"üïê Timestamp –∑–∞–∫–∞–∑–∞: {order_timestamp}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
                relevant_transactions = 0
                for i, tx in enumerate(data.get('txs', [])):
                    tx_hash = tx.get('hash')
                    tx_time = tx.get('time', 0)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
                    if tx_time <= order_timestamp:
                        logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é {i+1}: {tx_hash[:16]}... (–≤—Ä–µ–º—è: {tx_time}, –∑–∞–∫–∞–∑: {order_timestamp})")
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –ª–∏ —É–∂–µ —ç—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                    if await db.is_transaction_used(tx_hash):
                        logger.info(f"‚ôªÔ∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash[:16]}... —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞")
                        continue
                    
                    relevant_transactions += 1
                    logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {relevant_transactions}: {tx_hash[:16]}... (–≤—Ä–µ–º—è: {tx_time})")
                    
                    for j, output in enumerate(tx.get('out', [])):
                        output_addr = output.get('addr')
                        output_value = output.get('value', 0)
                        
                        if output_addr == address:
                            received_amount = decimal.Decimal(output_value) / 100000000
                            logger.info(f"üí≥ –ù–∞–π–¥–µ–Ω –ø–ª–∞—Ç–µ–∂: {received_amount} BTC (—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ—á–Ω–æ: {amount} BTC)")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –¥–æ–ø—É—Å—Ç–∏–º–æ–π –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é 1 —Å–∞—Ç–æ—à–∏
                            if min_amount <= received_amount <= max_amount:
                                logger.info(f"‚úÖ –ü–õ–ê–¢–ï–ñ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù! –°—É–º–º–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {received_amount} BTC")
                                return tx_hash
                            elif received_amount < min_amount:
                                logger.info(f"‚ùå –°—É–º–º–∞ –º–µ–Ω—å—à–µ —Ç—Ä–µ–±—É–µ–º–æ–π: {received_amount} < {min_amount}")
                            else:
                                logger.info(f"‚ùå –°—É–º–º–∞ –±–æ–ª—å—à–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–π: {received_amount} > {max_amount}")
                
                logger.info(f"üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {relevant_transactions}")
                logger.info("‚ùå –ü–ª–∞—Ç–µ–∂ —Å —Ç–æ—á–Ω–æ–π —Å—É–º–º–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
                return None
                
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return None
