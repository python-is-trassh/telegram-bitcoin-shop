import asyncio
import decimal
import random
from datetime import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton, CallbackQuery, Message
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from config import BOT_TOKEN, DB_URL, BITCOIN_ADDRESS, ADMIN_IDS, TEST_MODE, validate_config, logger
from database import DatabaseManager
from bitcoin_utils import check_bitcoin_payment, get_btc_rate
from states import UserStates

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
db = DatabaseManager(DB_URL)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
from handlers import router as main_router
from admin_handlers import router as admin_router, setup_admin_handlers
from review_handlers import router as review_router, setup_review_handlers
from edit_handlers import router as edit_router, setup_edit_handlers

# –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
@main_router.callback_query(F.data.startswith("buy_product_"))
async def buy_product_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
    try:
        product_id = int(callback.data.split("_")[2])
        locations = await db.get_locations(product_id)
        
        if not locations:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return
        
        await state.set_state(UserStates.SELECTING_LOCATION)
        await state.update_data(product_id=product_id)
        
        from keyboards import create_locations_menu
        await callback.message.edit_text(
            "üìç –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:",
            reply_markup=create_locations_menu(locations, product_id)
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ buy_product_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@main_router.callback_query(F.data.startswith("location_"))
async def location_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏"""
    try:
        location_id = int(callback.data.split("_")[1])
        data = await state.get_data()
        product_id = data.get('product_id')
        promo_code = data.get('promo_code')
        
        product = await db.get_product(product_id)
        btc_rate = await get_btc_rate()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–∞
        final_price = product['price_rub']
        discount_amount = decimal.Decimal('0')
        
        if promo_code:
            promo = await db.validate_promo_code(promo_code, final_price, callback.from_user.id)
            if promo:
                discount_amount = await db.calculate_discount(promo, final_price)
                final_price = final_price - discount_amount
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞—Ç–æ—à–∏ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        extra_satoshi = random.randint(1, 300)
        price_btc = final_price / btc_rate
        payment_amount = price_btc + decimal.Decimal(extra_satoshi) / 100000000
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order_id = await db.create_order(
            user_id=callback.from_user.id,
            product_id=product_id,
            location_id=location_id,
            price_rub=product['price_rub'],
            price_btc=price_btc,
            btc_rate=btc_rate,
            payment_amount=payment_amount,
            promo_code=promo_code,
            discount_amount=discount_amount
        )
        
        # –ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ
        if promo_code:
            promo = await db.validate_promo_code(promo_code, product['price_rub'], callback.from_user.id)
            if promo:
                await db.apply_promo_code(promo['id'], callback.from_user.id, order_id)
        
        await state.set_state(UserStates.PAYMENT_WAITING)
        await state.update_data(order_id=order_id)
        await state.update_data(promo_code=None)  # –û—á–∏—â–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        
        text = f"üí≥ *–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id}*\n\n"
        text += f"üì¶ –¢–æ–≤–∞—Ä: {product['name']}\n"
        
        if discount_amount > 0:
            text += f"üí∞ –¶–µ–Ω–∞: {product['price_rub']} ‚ÇΩ\n"
            text += f"üéüÔ∏è –°–∫–∏–¥–∫–∞: -{discount_amount} ‚ÇΩ\n"
            text += f"üí≥ –ö –æ–ø–ª–∞—Ç–µ: {final_price} ‚ÇΩ (`{payment_amount:.8f}` BTC)\n\n"
        else:
            text += f"üí∞ –ö –æ–ø–ª–∞—Ç–µ: `{payment_amount:.8f}` BTC\n\n"
        
        text += f"üìç Bitcoin –∞–¥—Ä–µ—Å:\n`{BITCOIN_ADDRESS}`\n\n"
        text += f"‚ö†Ô∏è *–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:*\n"
        text += f"üéØ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¢–û–ß–ù–û —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É: `{payment_amount:.8f}` BTC\n"
        text += f"üö´ –ù–ï –æ–∫—Ä—É–≥–ª—è–π—Ç–µ –∏ –ù–ï –∏–∑–º–µ–Ω—è–π—Ç–µ —Å—É–º–º—É\n"
        text += f"üì± –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—É–º–º—É –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        text += f"‚ö° –î–æ–ø—É—Å—Ç–∏–º–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å: —Ç–æ–ª—å–∫–æ ¬±1 —Å–∞—Ç–æ—à–∏\n"
        text += f"‚è∞ –ü–ª–∞—Ç–µ–∂ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞\n\n"
        text += f"‚ùå –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥—Ä—É–≥–æ–π —Å—É–º–º—ã –∑–∞–∫–∞–∑ –ù–ï –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n"
        text += f"‚è∞ –ó–∞–∫–∞–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–∏—Ç—Å—è —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç\n\n"
        text += f"üí° –î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—É–º–º—É –≤—ã—à–µ ‚òùÔ∏è"
        
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{order_id}"))
        builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_order_{order_id}"))
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode='Markdown')
        await callback.answer()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
        for admin_id in ADMIN_IDS:
            try:
                username = callback.from_user.username or "–±–µ–∑ username"
                admin_builder = InlineKeyboardBuilder()
                admin_builder.add(InlineKeyboardButton(
                    text="‚úÖ –í—ã–¥–∞—Ç—å —Ç–æ–≤–∞—Ä –≤—Ä—É—á–Ω—É—é", 
                    callback_data=f"admin_confirm_payment_{order_id}"
                ))
                
                admin_text = f"üÜï *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}*\n\n"
                admin_text += f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{username}\n"
                admin_text += f"üì¶ –¢–æ–≤–∞—Ä: {product['name']}\n"
                if discount_amount > 0:
                    admin_text += f"üí∞ –¶–µ–Ω–∞: {product['price_rub']} ‚ÇΩ\n"
                    admin_text += f"üéüÔ∏è –°–∫–∏–¥–∫–∞: -{discount_amount} ‚ÇΩ (–∫–æ–¥: {promo_code})\n"
                    admin_text += f"üí≥ –ö –æ–ø–ª–∞—Ç–µ: {final_price} ‚ÇΩ\n"
                admin_text += f"üí∞ –°—É–º–º–∞: `{payment_amount:.8f}` BTC\n"
                admin_text += f"üìç –ê–¥—Ä–µ—Å: `{BITCOIN_ADDRESS}`\n\n"
                admin_text += f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Ä—É—á–Ω–æ–π –≤—ã–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞"
                
                await bot.send_message(
                    admin_id, 
                    admin_text,
                    reply_markup=admin_builder.as_markup(),
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
                
        logger.info(f"–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ #{order_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ location_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞")

@main_router.callback_query(F.data.startswith("check_payment_"))
async def check_payment_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã"""
    try:
        order_id = int(callback.data.split("_")[2])
        order = await db.get_order(order_id)
        
        if not order:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if order['status'] == 'completed':
            await callback.answer("‚úÖ –ó–∞–∫–∞–∑ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∑–∞–∫–∞–∑
        if datetime.now() > order['expires_at']:
            await callback.answer("‚è∞ –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –∏—Å—Ç–µ–∫–ª–æ")
            return
        
        await callback.answer("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
        transaction_hash = await check_bitcoin_payment(
            order['bitcoin_address'], 
            order['payment_amount'], 
            order['created_at'],
            db
        )
        
        if transaction_hash:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –ª–∏ —É–∂–µ —ç—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
            if await db.is_transaction_used(transaction_hash):
                await callback.answer("‚ùå –≠—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –∑–∞–∫–∞–∑–∞")
                return
            
            # –ü–æ–º–µ—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é
            await db.mark_transaction_used(transaction_hash, order_id, order['payment_amount'])
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é —Å—Å—ã–ª–∫—É
            content_link = await db.get_available_link(order['location_id'])
            
            if content_link:
                await db.complete_order(order_id, content_link, transaction_hash)
                
                text = f"‚úÖ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\n"
                text += f"üì¶ –ó–∞–∫–∞–∑ #{order_id} –≤—ã–ø–æ–ª–Ω–µ–Ω\n\n"
                text += f"üîó –í–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç:\n{content_link}\n\n"
                text += f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ\n\n"
                text += f"üí¨ –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ —Ç–æ–≤–∞—Ä–µ –≤ —Ä–∞–∑–¥–µ–ª–µ \"üìã –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏\""
                
                await callback.message.edit_text(text, parse_mode='Markdown')
                await state.set_state(UserStates.MAIN_MENU)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ
                for admin_id in ADMIN_IDS:
                    try:
                        username = callback.from_user.username or "–±–µ–∑ username"
                        await bot.send_message(admin_id, f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ç @{username} –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
                
                logger.info(f"–ó–∞–∫–∞–∑ #{order_id} –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            else:
                await callback.message.edit_text("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
                logger.warning(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
        else:
            await callback.answer("‚ùå –¢–æ—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–ª–∞—Ç–µ–∂ –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Ç–æ—á–Ω–æ–π —Å—É–º–º–æ–π (¬±1 —Å–∞—Ç–æ—à–∏)")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_payment_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã")

# –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –∏ –æ—Ç–∑—ã–≤—ã
@main_router.callback_query(F.data == "user_history")
async def user_history_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫"""
    try:
        orders = await db.get_user_history(callback.from_user.id)
        
        if not orders:
            text = "üìã *–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏*\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫"
            from keyboards import create_back_to_main_menu
            builder = create_back_to_main_menu()
        else:
            text = "üìã *–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏*\n\n"
            builder = InlineKeyboardBuilder()
            
            for order in orders:
                date = order['completed_at'].strftime("%d.%m.%Y %H:%M")
                price = order['price_rub'] - order['discount_amount']
                
                order_text = f"üì¶ {order['product_name']}\n"
                order_text += f"üìç {order['location_name']}\n"
                order_text += f"üí∞ {price} ‚ÇΩ ‚Ä¢ {date}\n"
                
                if order['user_rating']:
                    stars = "‚≠ê" * order['user_rating']
                    order_text += f"‚≠ê –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {stars}"
                else:
                    order_text += "üí¨ –ú–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
                    builder.add(InlineKeyboardButton(
                        text=f"‚≠ê –û—Ü–µ–Ω–∏—Ç—å \"{order['product_name'][:20]}...\"",
                        callback_data=f"review_order_{order['id']}"
                    ))
                
                text += order_text + "\n\n"
            
            builder.add(InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
            builder.adjust(1)
        
        await state.set_state(UserStates.VIEWING_HISTORY)
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode='Markdown')
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ user_history_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–æ–º
@main_router.callback_query(F.data.startswith("admin_confirm_payment_"))
async def admin_confirm_payment_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–æ–º"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    try:
        order_id = int(callback.data.split("_")[3])
        order = await db.get_order(order_id)
        
        if not order:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if order['status'] != 'pending':
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é —Å—Å—ã–ª–∫—É
        content_link = await db.get_available_link(order['location_id'])
        
        if content_link:
            await db.complete_order(order_id, content_link, "manual_confirmation")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                user_text = f"‚úÖ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\n"
                user_text += f"üì¶ –ó–∞–∫–∞–∑ #{order_id} –≤—ã–ø–æ–ª–Ω–µ–Ω\n\n"
                user_text += f"üîó –í–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç:\n{content_link}\n\n"
                user_text += f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ\n\n"
                user_text += f"üí¨ –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ —Ç–æ–≤–∞—Ä–µ –≤ —Ä–∞–∑–¥–µ–ª–µ \"üìã –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏\""
                
                await bot.send_message(order['user_id'], user_text, parse_mode='Markdown')
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {order['user_id']}: {e}")
            
            await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            await callback.message.edit_text(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—Ä—É—á–Ω—É—é")
            
            logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –≤—Ä—É—á–Ω—É—é –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–∫–∞–∑ #{order_id}")
        else:
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Å—ã–ª–æ–∫")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_confirm_payment_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

# –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
@main_router.callback_query(F.data.startswith("cancel_order_"))
async def cancel_order_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞"""
    try:
        order_id = int(callback.data.split("_")[2])
        order = await db.get_order(order_id)
        
        if not order or order['user_id'] != callback.from_user.id:
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if order['status'] != 'pending':
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å")
            return
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
        async with db.pool.acquire() as conn:
            await conn.execute("UPDATE orders SET status = 'cancelled' WHERE id = $1", order_id)
        
        text = f"‚ùå *–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω*\n\n"
        text += f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è"
        
        from keyboards import create_main_menu
        await callback.message.edit_text(text, reply_markup=create_main_menu(), parse_mode='Markdown')
        await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
        await state.set_state(UserStates.MAIN_MENU)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ #{order_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_order_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–º–µ–Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
async def cancel_expired_orders():
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    while True:
        try:
            if db.pool:
                async with db.pool.acquire() as conn:
                    expired_orders = await conn.fetch('''
                        SELECT id, user_id FROM orders 
                        WHERE status = 'pending' AND expires_at < NOW()
                    ''')
                    
                    for order in expired_orders:
                        await conn.execute(
                            "UPDATE orders SET status = 'expired' WHERE id = $1",
                            order['id']
                        )
                        
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        try:
                            await bot.send_message(
                                order['user_id'],
                                f"‚è∞ –ó–∞–∫–∞–∑ #{order['id']} –æ—Ç–º–µ–Ω–µ–Ω –∏–∑-–∑–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–ª–∞—Ç—ã"
                            )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {order['user_id']}: {e}")
                    
                    if expired_orders:
                        logger.info(f"–û—Ç–º–µ–Ω–µ–Ω–æ {len(expired_orders)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {e}")
        
        await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not validate_config():
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await db.init_pool()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ db –∏ bot
        setup_admin_handlers(db, bot)
        setup_review_handlers(db, bot)
        setup_edit_handlers(db, bot)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        dp.include_router(main_router)
        dp.include_router(admin_router)
        dp.include_router(review_router)
        dp.include_router(edit_router)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        cancel_task = asyncio.create_task(cancel_expired_orders())
        
        logger.info("üöÄ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Bitcoin –º–∞–≥–∞–∑–∏–Ω –∑–∞–ø—É—â–µ–Ω!")
        logger.info(f"‚Çø Bitcoin –∞–¥—Ä–µ—Å: {BITCOIN_ADDRESS}")
        logger.info(f"üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {ADMIN_IDS}")
        logger.info("‚ú® –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
        logger.info("  üîí –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π")
        logger.info("  üì¶ –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Å—Å—ã–ª–æ–∫")
        logger.info("  üìã –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫")
        logger.info("  ‚≠ê –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏ –æ—Ç–∑—ã–≤–æ–≤")
        logger.info("  üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥—ã –∏ —Å–∫–∏–¥–∫–∏")
        logger.info("  üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–æ–≤")
        if TEST_MODE:
            logger.warning("üß™ –í–ö–õ–Æ–ß–ï–ù –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –±—É–¥—É—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º–∏!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
        
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
        if 'cancel_task' in locals():
            cancel_task.cancel()
            try:
                await cancel_task
            except asyncio.CancelledError:
                pass
        
        if db.pool:
            await db.pool.close()
        
        if bot.session:
            await bot.session.close()
        
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
