import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

from config import BOT_TOKEN, DB_URL, BITCOIN_ADDRESS, ADMIN_IDS, TEST_MODE, validate_config, logger
from database import DatabaseManager

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
db = DatabaseManager(DB_URL)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∏ setup —Ñ—É–Ω–∫—Ü–∏–∏
from handlers import router as main_router, setup_handlers
from admin_handlers import router as admin_router, setup_admin_handlers
from review_handlers import router as review_router, setup_review_handlers
from edit_handlers import router as edit_router, setup_edit_handlers

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–º–µ–Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
async def cancel_expired_orders():
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    while True:
        try:
            if db.pool:
                async with db.pool.acquire() as conn:
                    expired_orders = await conn.fetch('''
                        SELECT id, user_id FROM orders 
                        WHERE status = 'pending' AND expires_at < NOW()
                    ''')
                    
                    for order in expired_orders:
                        await conn.execute(
                            "UPDATE orders SET status = 'expired' WHERE id = $1",
                            order['id']
                        )
                        
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        try:
                            await bot.send_message(
                                order['user_id'],
                                f"‚è∞ –ó–∞–∫–∞–∑ #{order['id']} –æ—Ç–º–µ–Ω–µ–Ω –∏–∑-–∑–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–ª–∞—Ç—ã"
                            )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {order['user_id']}: {e}")
                    
                    if expired_orders:
                        logger.info(f"–û—Ç–º–µ–Ω–µ–Ω–æ {len(expired_orders)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {e}")
        
        await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not validate_config():
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await db.init_pool()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ db –∏ bot
        setup_handlers(db, bot)
        setup_admin_handlers(db, bot)
        setup_review_handlers(db, bot)
        setup_edit_handlers(db, bot)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ—É—Ç–µ—Ä–æ–≤
        # –í–∞–∂–Ω–æ: –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–û–°–õ–ï–î–ù–ò–ú–ò
        dp.include_router(main_router)      # –û–°–ù–û–í–ù–û–ô - –ø–µ—Ä–≤—ã–π (–æ–±—â–∏–µ callback)
        dp.include_router(review_router)    # –û–¢–ó–´–í–´ - –≤—Ç–æ—Ä–æ–π  
        dp.include_router(edit_router)      # –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï - —Ç—Ä–µ—Ç–∏–π (admin_edit_*, admin_delete_*)
        dp.include_router(admin_router)     # –ê–î–ú–ò–ù - –ø–æ—Å–ª–µ–¥–Ω–∏–π (admin_menu, admin_add_*, admin_manage_*)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        cancel_task = asyncio.create_task(cancel_expired_orders())
        
        logger.info("üöÄ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Bitcoin –º–∞–≥–∞–∑–∏–Ω –∑–∞–ø—É—â–µ–Ω!")
        logger.info(f"‚Çø Bitcoin –∞–¥—Ä–µ—Å: {BITCOIN_ADDRESS}")
        logger.info(f"üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {ADMIN_IDS}")
        logger.info("‚ú® –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
        logger.info("  üîí –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π")
        logger.info("  üì¶ –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Å—Å—ã–ª–æ–∫")
        logger.info("  üìã –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫")
        logger.info("  ‚≠ê –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏ –æ—Ç–∑—ã–≤–æ–≤")
        logger.info("  üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥—ã –∏ —Å–∫–∏–¥–∫–∏")
        logger.info("  üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–æ–≤")
        logger.info("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        logger.info("  ‚úÖ –£–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
        logger.info("  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã")
        logger.info("  ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Ä–æ—É—Ç–µ—Ä–æ–≤")
        logger.info("  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç—Å—Ç—É–ø—ã –≤ database.py")
        if TEST_MODE:
            logger.warning("üß™ –í–ö–õ–Æ–ß–ï–ù –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –±—É–¥—É—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º–∏!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
        
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
        if 'cancel_task' in locals():
            cancel_task.cancel()
            try:
                await cancel_task
            except asyncio.CancelledError:
                pass
        
        if db.pool:
            await db.pool.close()
        
        if bot.session:
            await bot.session.close()
        
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
