import decimal
import random
from datetime import datetime
from typing import Dict, List
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

from states import UserStates, AdminStates
from keyboards import (
    create_main_menu, create_categories_menu, create_products_menu,
    create_product_detail_menu, create_locations_menu, create_review_menu,
    create_admin_menu, create_manage_categories_menu, create_manage_products_menu,
    create_manage_locations_menu, create_manage_promos_menu,
    create_back_to_admin_menu, create_back_to_main_menu
)
from bitcoin_utils import get_btc_rate, check_bitcoin_payment
from config import ADMIN_IDS, BITCOIN_ADDRESS, logger

router = Router()

class Handlers:
    def __init__(self, db, bot: Bot):
        self.db = db
        self.bot = bot

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    @router.message(Command("start"))
    async def start_handler(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await state.set_state(UserStates.MAIN_MENU)
        
        try:
            welcome_text = await self.db.get_setting('welcome_message')
            await message.answer(welcome_text, reply_markup=create_main_menu())
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} (@{message.from_user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_handler: {e}")
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!", reply_markup=create_main_menu())

    @router.message(Command("admin"))
    async def admin_handler(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
        if message.from_user.id not in ADMIN_IDS:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ –æ—Ç {message.from_user.id} (@{message.from_user.username})")
            return
        
        await state.set_state(AdminStates.ADMIN_MENU)
        await message.answer("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=create_admin_menu())
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤–æ—à–µ–ª –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
    @router.callback_query(F.data == "main_menu")
    async def main_menu_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        await state.set_state(UserStates.MAIN_MENU)
        try:
            await callback.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=create_main_menu())
            await callback.answer()
        except TelegramBadRequest:
            await callback.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=create_main_menu())

    @router.callback_query(F.data == "admin_menu")
    async def admin_menu_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é"""
        if callback.from_user.id not in ADMIN_IDS:
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
            return
        
        await state.set_state(AdminStates.ADMIN_MENU)
        try:
            await callback.message.edit_text("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=create_admin_menu())
            await callback.answer()
        except TelegramBadRequest:
            await callback.message.answer("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=create_admin_menu())

    @router.callback_query(F.data == "categories")
    async def categories_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–∞–ª–æ–≥–∞"""
        await state.set_state(UserStates.BROWSING_CATEGORIES)
        
        try:
            categories = await self.db.get_categories()
            
            if not categories:
                await callback.message.edit_text("üì¶ –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç", reply_markup=create_main_menu())
                await callback.answer()
                return
            
            await callback.message.edit_text(
                "üõç –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=create_categories_menu(categories)
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ categories_handler: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞")

    @router.callback_query(F.data == "about")
    async def about_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–≥–∞–∑–∏–Ω–µ"""
        try:
            about_text = await self.db.get_setting('about_text')
            await callback.message.edit_text(about_text, reply_markup=create_back_to_main_menu())
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ about_handler: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

    @router.callback_query(F.data == "btc_rate")
    async def btc_rate_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫—É—Ä—Å–∞ Bitcoin"""
        try:
            await callback.answer("üîÑ –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å...")
            rate = await get_btc_rate()
            
            text = f"‚Çø *–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å Bitcoin*\n\n"
            text += f"üí∞ 1 BTC = {rate:,.2f} ‚ÇΩ\n\n"
            text += f"üìä –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"
            
            await callback.message.edit_text(text, reply_markup=create_back_to_main_menu(), parse_mode='Markdown')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ btc_rate_handler: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞")

    @router.callback_query(F.data == "stats")
    async def stats_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            stats = await self.db.get_stats()
            
            text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞*\n\n"
            text += f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['total_orders']}\n"
            text += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed_orders']}\n"
            text += f"‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {stats['pending_orders']}\n"
            text += f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {stats['total_revenue']:,.2f} ‚ÇΩ\n"
            text += f"‚≠ê –û—Ç–∑—ã–≤–æ–≤: {stats['total_reviews']}\n"
            if stats['total_reviews'] > 0:
                text += f"üìà –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {stats['avg_rating']:.1f}/5\n"
            text += f"\nüìÖ *–°–µ–≥–æ–¥–Ω—è:*\n"
            text += f"üÜï –ó–∞–∫–∞–∑–æ–≤: {stats['today_orders']}\n"
            text += f"üíµ –í—ã—Ä—É—á–∫–∞: {stats['today_revenue']:,.2f} ‚ÇΩ"
            
            await callback.message.edit_text(text, reply_markup=create_back_to_main_menu(), parse_mode='Markdown')
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ stats_handler: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    @router.callback_query(F.data.startswith("cancel_order_"))
    async def cancel_order_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞"""
        try:
            order_id = int(callback.data.split("_")[2])
            order = await self.db.get_order(order_id)
            
            if not order or order['user_id'] != callback.from_user.id:
                await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            if order['status'] != 'pending':
                await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å")
                return
            
            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
            async with self.db.pool.acquire() as conn:
                await conn.execute("UPDATE orders SET status = 'cancelled' WHERE id = $1", order_id)
            
            text = f"‚ùå *–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω*\n\n"
            text += f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è"
            
            await callback.message.edit_text(text, reply_markup=create_main_menu(), parse_mode='Markdown')
            await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
            await state.set_state(UserStates.MAIN_MENU)
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ #{order_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_order_handler: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞")

    @router.callback_query(F.data.startswith("admin_confirm_payment_"))
    async def admin_confirm_payment_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–æ–º"""
        if callback.from_user.id not in ADMIN_IDS:
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
            return
        
        try:
            order_id = int(callback.data.split("_")[3])
            order = await self.db.get_order(order_id)
            
            if not order:
                await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            if order['status'] != 'pending':
                await callback.answer("‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é —Å—Å—ã–ª–∫—É
            content_link = await self.db.get_available_link(order['location_id'])
            
            if content_link:
                await self.db.complete_order(order_id, content_link, "manual_confirmation")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    user_text = f"‚úÖ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\n"
                    user_text += f"üì¶ –ó–∞–∫–∞–∑ #{order_id} –≤—ã–ø–æ–ª–Ω–µ–Ω\n\n"
                    user_text += f"üîó –í–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç:\n{content_link}\n\n"
                    user_text += f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ\n\n"
                    user_text += f"üí¨ –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ —Ç–æ–≤–∞—Ä–µ –≤ —Ä–∞–∑–¥–µ–ª–µ \"üìã –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏\""
                    
                    await self.bot.send_message(order['user_id'], user_text, parse_mode='Markdown')
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {order['user_id']}: {e}")
                
                await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                await callback.message.edit_text(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—Ä—É—á–Ω—É—é")
                
                logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –≤—Ä—É—á–Ω—É—é –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–∫–∞–∑ #{order_id}")
            else:
                await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Å—ã–ª–æ–∫")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_confirm_payment_handler: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
    @router.callback_query(F.data.startswith("category_"))
    async def category_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            category_id = int(callback.data.split("_")[1])
            products = await self.db.get_products(category_id)
            
            if not products:
                categories = await self.db.get_categories()
                await callback.message.edit_text("üì¶ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏", 
                                               reply_markup=create_categories_menu(categories))
                await callback.answer()
                return
            
            await state.set_state(UserStates.BROWSING_PRODUCTS)
            await callback.message.edit_text(
                "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
                reply_markup=create_products_menu(products, category_id)
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ category_handler: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

    @router.callback_query(F.data.startswith("product_"))
    async def product_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞"""
        try:
            product_id = int(callback.data.split("_")[1])
            product = await self.db.get_product(product_id)
            
            if not product:
                await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            locations = await self.db.get_locations(product_id)
            reviews = await self.db.get_product_reviews(product_id, limit=3)
            
            await state.set_state(UserStates.VIEWING_PRODUCT)
            await state.update_data(product_id=product_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å Bitcoin
            btc_rate = await get_btc_rate()
            price_btc = product['price_rub'] / btc_rate
            
            text = f"üì¶ *{product['name']}*\n\n"
            text += f"üìù {product['description']}\n\n"
            text += f"üí∞ –¶–µ–Ω–∞: {product['price_rub']} ‚ÇΩ (~{price_btc:.8f} BTC)\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
            if product['review_count'] > 0:
                stars = "‚≠ê" * int(product['rating'])
                text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {stars} {product['rating']:.1f}/5 ({product['review_count']} –æ—Ç–∑—ã–≤–æ–≤)\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã
            if reviews:
                text += "üí¨ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:*\n"
                for review in reviews:
                    stars = "‚≠ê" * review['rating']
                    comment = review['comment'][:100] + "..." if len(review['comment']) > 100 else review['comment']
                    text += f"{stars} {comment}\n"
                text += "\n"
            
            if locations:
                text += "‚úÖ –¢–æ–≤–∞—Ä –≤ –Ω–∞–ª–∏—á–∏–∏"
            else:
                text += "‚ùå –¢–æ–≤–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            
            await callback.message.edit_text(
                text,
                reply_markup=create_product_detail_menu(product_id, bool(locations), bool(reviews)),
                parse_mode='Markdown'
            )
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ product_handler: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞")

    # –ü—Ä–æ–º–æ–∫–æ–¥—ã
    @router.callback_query(F.data == "enter_promo")
    async def enter_promo_handler(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        await state.set_state(UserStates.ENTERING_PROMO)
        
        text = "üéüÔ∏è *–ü—Ä–æ–º–æ–∫–æ–¥*\n\n"
        text += "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏:"
        
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu"))
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode='Markdown')
        await callback.answer()

    @router.message(StateFilter(UserStates.ENTERING_PROMO))
    async def process_promo_code(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        try:
            promo_code = message.text.strip().upper()
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ (–ø—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞)
            await state.update_data(promo_code=promo_code)
            
            text = f"‚úÖ *–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω*\n\n"
            text += f"üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥: `{promo_code}`\n\n"
            text += f"–°–∫–∏–¥–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞"
            
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="üõç –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="categories"))
            builder.add(InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
            builder.adjust(1)
            
            await message.answer(text, reply_markup=builder.as_markup(), parse_mode='Markdown')
            await state.set_state(UserStates.MAIN_MENU)
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –ø—Ä–æ–º–æ–∫–æ–¥ {promo_code}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ process_promo_code: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    @router.message()
    async def unknown_message_handler(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await message.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ callback'–æ–≤
    @router.callback_query()
    async def unknown_callback_handler(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback'–æ–≤"""
        await callback.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
