from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

from states import UserStates
from config import logger

router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ db –∏ bot
_db = None
_bot = None

def setup_review_handlers(db, bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Ç–∑—ã–≤–æ–≤"""
    global _db, _bot
    _db = db
    _bot = bot

def create_review_menu(order_id: int):
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –æ—Ü–µ–Ω–∫–∏"""
    builder = InlineKeyboardBuilder()
    for i in range(1, 6):
        builder.add(InlineKeyboardButton(
            text=f"{'‚≠ê' * i} {i}",
            callback_data=f"rate_{order_id}_{i}"
        ))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="user_history"))
    builder.adjust(5, 1)
    return builder.as_markup()

@router.callback_query(F.data.startswith("product_reviews_"))
async def product_reviews_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤ –æ —Ç–æ–≤–∞—Ä–µ"""
    try:
        product_id = int(callback.data.split("_")[2])
        product = await _db.get_product(product_id)
        reviews = await _db.get_product_reviews(product_id, limit=10)
        
        if not reviews:
            text = f"üì¶ *{product['name']}*\n\n‚ÑπÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –æ —ç—Ç–æ–º —Ç–æ–≤–∞—Ä–µ"
        else:
            text = f"üì¶ *{product['name']}*\n\n"
            text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {'‚≠ê' * int(product['rating'])} {product['rating']:.1f}/5\n"
            text += f"üí¨ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {product['review_count']}\n\n"
            text += "*–û—Ç–∑—ã–≤—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π:*\n\n"
            
            for i, review in enumerate(reviews, 1):
                stars = "‚≠ê" * review['rating']
                user_id_masked = f"***{str(review['user_id'])[-3:]}"
                date = review['created_at'].strftime("%d.%m.%Y")
                text += f"{i}. {stars} –æ—Ç {user_id_masked} ({date})\n"
                if review['comment']:
                    text += f"   {review['comment']}\n"
                text += "\n"
        
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üîô –ö —Ç–æ–≤–∞—Ä—É", callback_data=f"product_{product_id}"))
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode='Markdown')
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ product_reviews_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤")

@router.callback_query(F.data.startswith("review_order_"))
async def review_order_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –æ—Ç–∑—ã–≤–∞"""
    try:
        order_id = int(callback.data.split("_")[2])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
        if not await _db.can_review_order(callback.from_user.id, order_id):
            await callback.answer("‚ùå –í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑ –∏–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        order = await _db.get_order(order_id)
        product = await _db.get_product(order['product_id'])
        
        await state.set_state(UserStates.WRITING_REVIEW)
        await state.update_data(review_order_id=order_id, review_product_id=order['product_id'])
        
        text = f"‚≠ê *–û—Ü–µ–Ω–∫–∞ —Ç–æ–≤–∞—Ä–∞*\n\n"
        text += f"üì¶ {product['name']}\n\n"
        text += f"–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É —Ç–æ–≤–∞—Ä—É:"
        
        await callback.message.edit_text(text, reply_markup=create_review_menu(order_id), parse_mode='Markdown')
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ review_order_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("rate_"))
async def rate_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    try:
        parts = callback.data.split("_")
        order_id = int(parts[1])
        rating = int(parts[2])
        
        await state.update_data(review_rating=rating)
        
        text = f"‚≠ê *–û—Ü–µ–Ω–∫–∞: {'‚≠ê' * rating}*\n\n"
        text += f"–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç–æ–≤–∞—Ä—É (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
        
        await callback.message.edit_text(text, parse_mode='Markdown')
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ rate_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@router.message(StateFilter(UserStates.WRITING_REVIEW))
async def process_review_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ—Ç–∑—ã–≤—É"""
    try:
        data = await state.get_data()
        order_id = data.get('review_order_id')
        product_id = data.get('review_product_id')
        rating = data.get('review_rating')
        comment = message.text.strip()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤
        await _db.add_review(message.from_user.id, product_id, order_id, rating, comment)
        
        text = f"‚úÖ *–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!*\n\n"
        text += f"‚≠ê –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {'‚≠ê' * rating}\n"
        if comment:
            text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
        
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üìã –ö –ø–æ–∫—É–ø–∫–∞–º", callback_data="user_history"))
        builder.add(InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        builder.adjust(1)
        
        await message.answer(text, reply_markup=builder.as_markup(), parse_mode='Markdown')
        await state.set_state(UserStates.MAIN_MENU)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_review_comment: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞")
